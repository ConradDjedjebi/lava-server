.. index:: lava-tool

.. _lava_tool:

lava-tool
=========

``lava-tool`` is the command-line tool for interacting with the various
services offered by LAVA via XML-RPC APIs. The full list of API calls
is visible on the **Available methods** link from the API menu::

 http://localhost/api/help

``lava-tool`` is primarily designed to assist users and uses desktop
integration hooks provided by ``python-keyring`` and
``gnome-keyring``. If writing or using scripts that need to interact
with LAVA, it is recommended to use XML-RPC API calls directly rather
than calling lava-tool; this will avoid the need to prompt for a
password to access the local user keyring. Scripts used by build
servers and continuous integration tools should ideally use a
dedicated user account, for similar reasons.

The API help page includes an example python script to connect to the
local instance. To add token support, use the syntax **username:token**
for the server concerned::

 server = xmlrpclib.ServerProxy("https://%s:%s@%s/RPC2" % (username, token, server))

See :ref:`xml_rpc` for more information.

.. _installing_lava_tool:

Installing lava-tool
--------------------

``lava-tool`` is installed alongside LAVA by default, when the top
level ``lava`` package is installed on a
:ref:`debian_installation`. ``lava-tool`` can also be installed on any
remote machine running a Debian-based distribution, without needing
the rest of LAVA. This allows a remote user to interact with any LAVA
instance on which the user has an account.::

  $ sudo apt update
  $ sudo apt install lava-tool

(If you are installing on Debian Jessie, you may want to first enable
``jessie-backports`` to install an updated ``lava-tool`` to use
some superuser operations or for other updates.)

.. _using_lava_tool:

Using lava-tool
---------------

Once the token is created, add it to the keyring for lava-tool. Click
on the "Display the token" link on the "Authentication Tokens" page
and copy the token. e.g. if your token was created on
validation.linaro.org::

  $ lava-tool auth-add https://<username>@validation.linaro.org/RPC2/
  Paste token for https://<username>@validation.linaro.org/RPC2/:
  Please set a password for your new keyring:
  Please confirm the password:
  Token added successfully for user <username>.

.. note:: Paste the token copied previously when it is asked
          above. Replace *username* with your username. If you don't
          already have a keyring, a new one will be created
          automatically. Set/use a password for keyring access as
          appropriate here.

Fixing issues with lava-tool
----------------------------

When using :ref:`lava-tool <lava_tool>` submit-job manually, this
error can be misleading::

 ERROR: Username provided but no token found.

``lava-tool`` is exact about the complete URL (not just the username),
so if you added authentication using ``http://`` then the lookup will
fail if you submit using ``https://``.

.. _scripted_job_submission:

Submitting jobs from a script
-----------------------------

When submitting a job using ``lava-tool submit-job``, the user is
requested to enter the password to open the keyring which stores the
lava :ref:`token <authentication_tokens>`. When submitting a job from
a script, the user can skip this step by adding the credentials in the
URL to the instance. ::

  $ lava-tool submit-job http://<login>:<token>@localhost/RPC2/

You can also use XML-RPC directly:

.. code-block:: python

  import xmlrpclib
  username = "USERNAME"
  token = "TOKEN_STRING"
  hostname = "HOSTNAME"
  server = xmlrpclib.ServerProxy("http://%s:%s@%s/RPC2" % (username, token, hostname))
  print server.system.listMethods()

gnomekeyring.IOError when submitting over ssh.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

::

  $ lava-tool auth-add http://administrator@192.168.11.100/RPC2/
  Paste token for http://administrator@192.168.11.100/RPC2/:
  Traceback (most recent call last):
  ...
    File "/usr/lib/python2.7/dist-packages/keyring/backend.py", line
    163, in set_password
      password, True)
  gnomekeyring.IOError

This error occurs because the python functions that LAVA uses will
store the connection credentials in the Gnome keyring, if it is
available (default with current Gnome desktops). When you connect over
SSH, you will be unable to unlock the keyring, and you will see this
error. There are several methods available that can be used to provide
remote access.

* Use a server version of Debian (or a remove the Gnome Keyring)
* Unset the DISPLAY environment variable in your shell (this will
  make the keyring library not use the GNOME keyring)
* Setup and use a file-based key ring::

    mkdir ~/.cache/keyring
    echo '
    [backend]
    default-keyring=keyring.backend.CryptedFileKeyring
    keyring-path=~/.cache/keyring/
    ' > ~/keyringrc.cfg

* Use a remote xmlrpclib call::

    import xmlrpclib
    import yaml

    config = yaml.dumps({ ... })
    server=xmlrpclib.ServerProxy("http://username:API-Key@localhost:8001/RPC2/")
    jobid=server.scheduler.submit_job(config)

Locked keyrings "locked collection"
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

lava-tool auth-add can fail with a message::

  cannot create an item in a locked collection.

This results from a locked Gnome keyring and this can be unlocked in
the python console:

Your keyring password will need to be entered into the python console
to unlock and you will need to be outside of the lava instance (or
call /usr/bin/python) to do it::

  $ python
  >>> import gnomekeyring
  >>> gnomekeyring.unlock_sync(None, 'mypassword');

if that fails, see gnomekeyring.IOError above.
